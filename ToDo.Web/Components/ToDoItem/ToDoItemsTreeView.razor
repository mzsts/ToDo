@inject IDbContextFactory<ToDoDbContext> ContextFactory
@inject NavigationManager NavigationManager
@inject ToDoService ToDoService

@if(Items is null)
{
    <MudProgressCircular Color="Color.Info" Size="Size.Large" Indeterminate="true"></MudProgressCircular>
}
else
{
    <MudTreeView T="ToDoItem" Items="@Items" Hover="true">
        <ItemTemplate>
            <MudTreeViewItem Items="@context.SubItems.ToHashSet()" Value="@context" Text="@context.Title" TextTypo="Typo.caption"
                             IconColor="@(context.IsSubItem ? Color.Warning : Color.Success)" Icon="@Icons.Filled.Label"
                             OnClick="@(() => NavigationManager.NavigateTo($"/edittodoitem/{context.Id}"))"/>
        </ItemTemplate>
    </MudTreeView>

    <MudButton StartIcon="@Icons.Outlined.AddCircleOutline" Color="Color.Success" Variant="Variant.Outlined" Class="ma-2"
                   OnClick="@(() => NavigationManager.NavigateTo("/createtodoitem"))">Create new</MudButton>
}

@code {
    private HashSet<ToDoItem> Items => ToDoService.ToDoItems.Where(item => item.IsSubItem == false).ToHashSet();

    protected override async Task OnInitializedAsync()
    {

        ToDoService.OnUpdate += async () => await InvokeAsync(StateHasChanged);

        await base.OnInitializedAsync();
    }
}
