@inject IDbContextFactory<ToDoDbContext> ContextFactory
@inject NavigationManager NavigationManager

<EditForm Model="@Item" OnValidSubmit="OnValidSubmit" Class="ma-4">
    <DataAnnotationsValidator/>
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12" sm="7">
            <MudCard Outlined>
                <MudCardHeader>
                    <MudGrid Justify="Justify.SpaceBetween">
                        <MudItem>
                            @(IsCreation ? "Create ToDo" : "Edit ToDo")
                        </MudItem>
                        <MudItem>
                            <MudChip Color="Color.Info">@Item.Status</MudChip>
                        </MudItem>
                    </MudGrid>
                </MudCardHeader>
                <MudCardContent>
                    <MudTextField Label="Title" Variant="Variant.Outlined" HelperText="Min. 5 characters"
                                    Clearable="true" Immediate="true"
                                    @bind-Value="Item.Title" For="@(() => Item.Title)"/>

                    <MudTextField T="string" Label="Desctiption" Variant="Variant.Outlined" 
                                    HelperText="Min. 5 characters" Lines="3"
                                    Clearable="true" Immediate="true"
                                    @bind-Value="Item.Description" For="@(() => Item.Description)"/>
                    <MudPaper Class="d-flex justify-space-around">
                        <MudDatePicker Label="Creating date" Variant="Variant.Outlined"
                                       ReadOnly="true" Disabled HelperText="Sets automatically"
                                       @bind-Date="Item.CreationDate"/>

                        <MudDatePicker Label="Completion date" Variant="Variant.Outlined"
                                       ReadOnly="true" Disabled HelperText="Sets automatically"
                                       @bind-Date="Item.CompletionDate"/>
                    </MudPaper>
                    <MudPaper Class="d-flex justify-space-around">
                        <MudTextField T="TimeSpan?" Label="Estimation time" Variant="Variant.Outlined"
                                  Clearable="true" Immediate="true" HelperText="hh:mm:ss. Less then 1 day" 
                                  @bind-Value="Item.EstimationTime" For="@(() => Item.EstimationTime)"/>

                        <MudTextField T="TimeSpan?" Label="Completion time" Variant="Variant.Outlined"
                                  Disabled Immediate="true" HelperText="Sets automatically" 
                                  @bind-Value="Item.CompletionTime" For="@(() => Item.CompletionTime)"/>
                    </MudPaper>
                    @if(IsCreation)
                    {
                        <MudSelect T="ToDoItemStatus" Label="Status" Variant="Variant.Outlined" 
                               OpenIcon="@Icons.Filled.KeyboardArrowDown" IconSize="Size.Large"
                               AdornmentColor="Color.Tertiary" AnchorOrigin="Origin.BottomCenter"
                               @bind-Value="Item.Status">
                            <MudSelectItem Value="ToDoItemStatus.Assigned"></MudSelectItem>
                            <MudSelectItem Value="ToDoItemStatus.InProgress"></MudSelectItem>
                        </MudSelect>
                    }
                    else
                    {
                        <MudSelect T="ToDoItemStatus" Label="Status" Variant="Variant.Outlined" 
                               OpenIcon="@Icons.Filled.KeyboardArrowDown" IconSize="Size.Large"
                               AdornmentColor="Color.Tertiary" AnchorOrigin="Origin.BottomCenter"
                               @bind-Value="Item.Status">
                            @foreach(var statusType in Enum.GetValues<ToDoItemStatus>())
                            {
                                <MudSelectItem Value="statusType"></MudSelectItem>
                            }
                        </MudSelect>
                    }
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success">Save</MudButton>
                    @if(IsCreation is false)
                    {
                        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary"
                               OnClick="@(() => NavigationManager.NavigateTo($"/createtodosubitem/{Item.Id}"))">Add sub item</MudButton>
                        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled"
                               Color="Color.Error" OnClick="DeleteToDoItem">Delete</MudButton>
                    }
                    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled"
                               Color="Color.Secondary" OnClick="@(() => NavigationManager.NavigateTo("/"))">Cancel</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full" Height="50%">
                <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                @if (success)
                {
                    <MudText Color="Color.Success">Success</MudText>
                }
                else
                {
                    <MudText Color="@Color.Error">
                        <ValidationSummary />
                    </MudText>
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to create ToDo item.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    [Parameter]
    public bool IsCreation { get; set; }

    [Parameter]
    public ToDoItem Item { get; set; }

    [Parameter]
    public ToDoItem Parent { get; set; }

    private bool success;

    private void OnValidSubmit(EditContext context)
    {
        success = true;

        _ = IsCreation ? InsertToDoItem() : UpdateToDoItem();

        StateHasChanged();
    }

    private async Task DeleteToDoItem()
    {
        using(var context = ContextFactory.CreateDbContext())
        {
            context.ToDoItems.Remove(Item);
            await context.SaveChangesAsync();
        }

        StateHasChanged();
    }

    private async Task UpdateToDoItem()
    {
        using(var context = ContextFactory.CreateDbContext())
        {
            context.Update(Item);

            var id = Item.Id;

            await context.SaveChangesAsync();
        }

        StateHasChanged();
    }

    private async Task InsertToDoItem()
    {
        using(var context = ContextFactory.CreateDbContext())
        {
            if(Parent is null)
            {
                await context.ToDoItems.AddAsync(Item);
            }
            else
            {
                Parent.SubItems.Add(Item);
                context.Update(Parent);
            }

            await context.SaveChangesAsync();
        }

        StateHasChanged();
    }
}
