@inject IDbContextFactory<ToDoDbContext> ContextFactory
@inject NavigationManager NavigationManager

@if(Items is null)
{
    <MudProgressCircular Color="Color.Info" Size="Size.Large" Indeterminate="true"></MudProgressCircular>
}
else
{
    <MudTreeView T="ToDoItem" Items="Items" Hover="true">
        <ItemTemplate>
            <MudTreeViewItem Items="@context.SubItems.ToHashSet()" Value="@context" Text="@context.Title" TextTypo="Typo.caption"
                             EndText="@context.Status.ToString()" Icon="@Icons.Filled.Label" EndTextTypo="Typo.subtitle2"
                             IconColor="@(context.IsSubItem ? Color.Warning : Color.Success)"
                             OnClick="@(() => NavigationManager.NavigateTo($"/edittodoitem/{context.Id}"))">
            </MudTreeViewItem>
        </ItemTemplate>
    </MudTreeView>

    <MudButton StartIcon="@Icons.Outlined.AddCircleOutline" Color="Color.Success" Variant="Variant.Outlined" Class="ma-2"
                   OnClick="@(() => NavigationManager.NavigateTo("/createtodoitem"))">Create new</MudButton>
}

@code {
    private HashSet<ToDoItem> Items { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using(var context = ContextFactory.CreateDbContext())
        {
            var temp = await context.ToDoItems.ToArrayAsync();
            Items = temp?.Where(item => item.IsSubItem == false).ToHashSet();
        }

        await base.OnInitializedAsync();
    }
}
